#!/bin/bash

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
    find . -name "$1"
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2) tar xjf $1 ;;
			*.tar.gz) tar xzf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) rar x $1 ;;
			*.gz) gunzip $1 ;;
			*.tar) tar xf $1 ;;
			*.tbz2) tar xjf $1 ;;
			*.tgz) tar xzf $1 ;;
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*.7z) 7z x $1 ;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

function know() {
  sed -i '' '/$1/d' ~/.ssh/known_hosts
}

function connect() {
  ssh -p 2204 nico@$1 ${@:2}
}

function upcusto() {
	if [ -z "$1" ] || [ -z "$2" ]; then
		echo "Usage: $0 <server> <files...>"
		return 1
	fi
	server=$1
	shift
	ssh-copy-id nico@${server} -p 2204 2> /dev/null
	for file in "$@"
	do
		scp -P 2204 $file nico@${server}:/var/www/scorecast/images/customization
	done
	ssh -p 2204 nico@${server} chown nico:www-data /var/www/scorecast/images/customization/*
	ssh -p 2204 nico@${server} chmod 664 /var/www/scorecast/images/customization/*
}

function conf() {

  if [ "$1" == "nginx" ]; then
    if [ -f /etc/nginx/sites-enabled/scorecast-proxy.nginx.conf ]; then
      sudo vi /etc/nginx/sites-enabled/scorecast-proxy.nginx.conf
    elif [ -f /etc/nginx/sites-enabled/scorecast.nginx.conf ]; then
      sudo vi /etc/nginx/sites-enabled/scorecast.nginx.conf
    else
      cd /etc/nginx/sites-enabled/
    fi
  elif [ "$1" == "php" ]; then
    if [ -d /etc/php/7.0 ]; then
      sudo vi /etc/php/7.0/fpm/pool.d/www.conf
    else
      sudo vi /etc/php5/fpm/pool.d/www.conf
    fi
  elif [ "$1" == "mysql" ]; then
    sudo vi /etc/mysql/conf.d/scorecast.cnf
  elif [ "$1" == "redis" ]; then
    sudo vi /etc/redis/redis.conf
  elif [ "$1" == "firewall" ]; then
    sudo vi /etc/init.d/firewall
  elif [ "$1" == "app" ]; then
    vi /var/www/scorecast/conf/app.yml
  elif [ "$1" == "sys" ]; then
    vi /var/www/scorecast/conf/sys.yml
  else
    echo "Usage: $FUNCNAME [nginx|php|mysql|redis|firewall|app|sys]"
  fi

}

function restart() {

  if [ "$1" == "nginx" ]; then
    sudo /usr/sbin/nginx -t
    if [ "$?" == 0 ]; then
      sudo /etc/init.d/nginx reload
    else
      RED=$(tput setaf 9)
      NC=$(tput sgr0)
      echo "[ ${RED}ko${NC} ] error in configuration file. Not restarting nginx"
    fi
  elif [ "$1" == "php" ]; then
    if [ -d /etc/php/7.0 ]; then
      sudo /etc/init.d/php7.0-fpm restart
    else
      sudo /etc/init.d/php5-fpm restart
    fi
  elif [ "$1" == "mysql" ]; then
    sudo /etc/init.d/mysql restart
  elif [ "$1" == "redis" ]; then
    sudo /etc/init.d/redis-server restart
  elif [ "$1" == "resque" ]; then
    sudo /etc/init.d/resque restart
  elif [ "$1" == "firewall" ]; then
    sudo /etc/init.d/firewall
  else
    echo "Usage: $FUNCNAME [nginx|php|mysql|redis|resque|firewall]"
  fi

}

if [[ "$OSTYPE" =~ ^darwin ]]; then

  # start/stop nginx
  nginx() {
    if [[ -n "$1" ]]; then
      phpver="`php -r \"echo str_replace('.', '', substr(phpversion(), 0, 3));\"`"
      if [[ $1 == 'restart' ]]; then
        nginx stop
        nginx start
      elif [[ $1 == 'start' ]]; then
        sudo brew services start redis
        sudo brew services start php${phpver}
				sudo brew services start homebrew/versions/mysql56
        sudo brew services start nginx
      else
				sudo brew services stop nginx
				sudo brew services stop homebrew/versions/mysql56
        sudo brew services stop php${phpver}
        sudo brew services stop redis
      fi
    else
      echo "usage: nginx <start|stop|restart>"
    fi
  }

fi

